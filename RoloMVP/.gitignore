# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## Compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## Compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Xcode Patch
*.xcodeproj/*
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/
!*.xcworkspace/contents.xcworkspacedata
/*.gcno
**/xcshareddata/WorkspaceSettings.xcsettings

## Build generated
build/
DerivedData/

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Xcode 8 and later
*.xcscmblueprint
*.xccheckout

## Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
Packages/
Package.pins
Package.resolved
*.xcodeproj
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
.swiftpm

.build/

## CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
*.xcworkspace

## Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
Carthage/Checkouts
Carthage/Build/

## Accio dependency management
Dependencies/
.accio/

## fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

## Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

## macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

## Swift
# Swift Package Manager
.swiftpm/
.build/

# Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift compiled files
*.swiftmodule
*.swiftdoc
*.swiftsourceinfo

## Supabase
# Supabase CLI local settings
.branches
.temp
supabase/.branches
supabase/.temp

# If using Supabase CLI with local dev (only ignore if not using)
# supabase/.env

## Configuration Files with Secrets
# IMPORTANT: Never commit API keys or secrets!
Resources/Config.xcconfig
# Backup the template instead
!Resources/Config.xcconfig.template

## Environment Variables
.env
.env.local
.env.*.local

## Testing
*.gcov
*.gcda
*.gcno

## App Signing
*.cer
*.p12
*.mobileprovision
*.dSYM.zip
*.dSYM

## Provisioning Profiles
*.mobileprovision
*.provisionprofile

## Breakpoints
*.xcbkptlist

## Code coverage
*.profraw
*.profdata
coverage/

## Logs
*.log

## Backup files
*~
*.swp
*.bak
*.tmp

## IDE
.vscode/
.idea/

## Archive
*.ipa
*.app.zip

